{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","tests/multi/modules/filter.js","script.js","tests/multi/modules/format.js","tests/multi/modules/id.js","tests/multi/modules/line.js","tests/multi/modules/points.js","tests/multi/modules/range.js","tests/multi/modules/sort.js","tests/multi/modules/tooltip.js","tests/multi/script.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","row","data","ret","push",2,"id","data_types","config","j","data_type","parseFloat","d3","time","format","date_format","parse","ids","console","log","type","get","./id","./sort",3,"url","invert","split","raw","attr",4,"points","mode","addLine","index","accessor_cord","path","select","append","color","rowId","linear","svg","line","x","accessor_scaled_x","y","accessor_scaled_y","interpolate","accessor","temp","coordinates","update","value","v_accessor_scaled","v_accessor_cord","accessor_scaled","setActivated","activated","values","points_s","selectAll","classed","updateVisibility","./points",5,"visible",6,"min","max","minMultipleSets","v_accessor","lmin","maxMultipleSets","lmax","applyOverflow","factor","Date","getTime",7,"sort","b",8,"opt","nextIndex","item","this_d","next","afterThis","beforeNext","Δ1","Math","abs","Δ2","tooltip","parent","textAccessor","tip","empty","label","text","cord","updateTooltip","xScale","yScale","mouse","graphTransform","xstart","x_date","tooltipIndex","d","round",9,"loadFiles","mkcb","err","resp","alert","datasetsMeta","loaded","loadVisualization","csv","draw","xAxisContainer","xAxis","yAxisContainer","yAxis","v","filter","xWertebereich","yWertebereich","range","domain","graph","zoom","behavior","scaleExtent","on","w","h","xend","ytop","ybottom","circles","enter","this","$","showPoints","is","name","hasClass","toggleClass","json","res","datasets","colors","scale","category10","dataset","c","axis","orient","ticks","entry","./modules/filter","./modules/format","./modules/id","./modules/line","./modules/points","./modules/range","./modules/sort","./modules/tooltip"],"mappings":"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","file":"script.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports.row = function(data, row) {\n  var ret = [];\n  for(var i = 0; i<data.length; i++){\n    if(typeof data[i][row] !== \"undefined\"){\n      ret.push(data[i]);\n    }\n  }\n  return ret;\n}\n",null,"var sort = require('./sort');\nvar id = require('./id');\n\nmodule.exports.data_types = function(data, config) {\n  // index suchen\n  for(var i = 0; i<data.length; i++) {\n    for(var j = 0; j<config.length; j++) {\n      if(config[j].data_type == \"Number\") {\n        data[i][config[j].row] = parseFloat(data[i][config[j].row]);\n      } else if(config[j].data_type == \"Date\") {\n        data[i][config[j].row] =  d3.time.format(config[j].date_format)\n                                    .parse(data[i][config[j].row]);\n      }\n    }\n  }\n  return data;\n}\n\nmodule.exports.ids = function(data, config) {\n  console.log(data);\n  console.log(config);\n\n  for(var i = 0; i<data.length; i++) {\n    for(var j = 0; j<config.length; j++){\n      if(config[j].type == \"index\"){\n        continue;\n      }\n      data[i][id.get(config[j])] = data[i][config[j].row];\n      delete data[i][config[j].row];\n    }\n  }\n\n  return data;\n}\n","module.exports.get = function(config) {\n  return config.row + \"#\" + config.url;\n}\n\nmodule.exports.invert = function(id) {\n  return id.split(\"#\")[0];\n}\n\nmodule.exports.raw = function(attr, url) {\n  return attr+\"#\"+url;\n}\n","var points = require(\"./points\");\n\n/**\n * Html-Element select zur Auswahl des Modus: Die Variable 'mode' bei\n * Änderung aktualisieren.\n *\n * Checkbox 'Punkte anzeigen': Die Datenpunkte anzeigen / verstecken.\n */\n\nmodule.exports.mode = \"undefined\";\n\n/**\n * Fügt eine Linie hinzu.\n * @param  {[Object]} index  Die Config des Indexes.\n * @param  {[Object]} config Die Config der betreffenden Spalte.\n */\nmodule.exports.addLine = function(index, config, data, accessor_cord) {\n  var path = d3.select(\"#graph\")\n   .append(\"path\")\n   .attr(\"class\", \"line\")\n   .attr(\"style\", \"stroke:\"+config.color)\n   .attr(\"data-row\", config.rowId);\n\n   if(module.exports.mode == \"linear\" || module.exports.mode == \"undefined\"){\n      path.attr(\"d\", module.exports.linear(data, accessor_cord));\n   } else {\n     var line = d3.svg.line()\n       .x(accessor_scaled_x)\n       .y(accessor_scaled_y)\n       .interpolate(module.exports.mode);\n   }\n}\n\n/**\n * Gibt die Lineare Interpolation als SVG-Path-String zurück\n * @param  {[Array]} data        Das Datenarray\n * @param  {{Function}} accessor Die Funktion, welche die Koordinaten zurück-\n *                               gibt des entsprechenden Punktes\n * @return {[String]}            String, das in das Attribut 'd' im path-\n *                               Element eingesetzt werden muss.\n */\nmodule.exports.linear = function(data, accessor) {\n  var path = \"\";\n\n  //figure out\n  var temp = \"Weighted Price\";\n\n  for(var i = 0; i < data.length; i++) {\n    var coordinates = accessor(data[i], temp);\n\n    if(i !== 0){\n      // L-Befehl für eine Linie\n      path += \"L\" + coordinates[0] + \",\" + coordinates[1];\n    } else {\n      // Erster Punkt: M-Befehl für Anfangspunkt.\n      path += \"M\" + coordinates[0] + \",\" + coordinates[1];\n    }\n\n    if(i !== data.length - 1) {\n      path += \" \";\n    }\n  }\n  return path;\n}\n\nmodule.exports.update = function(data, index, value, v_accessor_scaled, v_accessor_cord) {\n    if(module.exports.mode == \"linear\" || module.exports.mode == \"undefined\"){\n      d3.select(\".line[data-row='\" + value.rowId + \"']\")\n       .attr(\"d\", module.exports.linear(data, v_accessor_cord(index, value)));\n    } else {\n      var line = d3.svg.line()\n        .x(index.accessor_scaled)\n        .y(v_accessor_scaled(value))\n        .interpolate(module.exports.mode);\n      d3.select(\".line[data-row='\" + value.rowId + \"']\")\n        .attr(\"d\", line(data));\n    }\n}\n\n\nmodule.exports.setActivated = function(activated, rowId, values){\n  var points_s = d3.selectAll(\".data-point[data-row='\"+rowId+\"']\");\n  var line = d3.selectAll(\".line[data-row='\"+rowId+\"']\");\n\n  line.classed(\"hidden\", !activated);\n\n  for(var i = 0; i<values.length; i++){\n    if(values[i].rowId == rowId){\n      values[i].activated = activated;\n    }\n  }\n\n  if(!activated){\n    // Nicht aktiviert: Override\n    points_s.classed(\"hidden\", !activated);\n  } else {\n    // Aktiviert: Zeigen, danach das Modul points entscheiden lassen.\n    points_s.classed(\"hidden\", !activated);\n    points.updateVisibility(values);\n  }\n\n}\n","module.exports.visible = false;\n\nmodule.exports.updateVisibility = function(values) {\n  for(var i = 0; i<values.length; i++){\n    var points = d3.selectAll(\".data-point[data-row='\"+values[i].rowId+\"']\");\n    console.log(values[i].activated);\n    if(module.exports.visible && values[i].activated) {\n      points.classed(\"hidden\", false);\n    } else {\n      points.classed(\"hidden\", true);\n    }\n  }\n}\n","/**\n * Gibt das Minimum einer einzelnen Datenreihe zurück\n * @param  {[Array]} data     Der Datensatz\n * @param  {{Function}} index Der Accessor für die zu untersuchende Datenreihe\n * @return {[Object]}         Das Minimum\n */\nmodule.exports.min = function(data, accessor) {\n  return d3.min(data, accessor);\n}\n\n/**\n * Gibt das Maximum einer einzelnen Datenreihe zurück\n * @param  {[Array]} data     Der Datensatz\n * @param  {{Function}} index Der Accessor für die zu untersuchende Datenreihe\n * @return {[Object]}         Das Maximum\n */\nmodule.exports.max = function(data, accessor) {\n  return d3.max(data, accessor);\n}\n\n/**\n * Gibt das Minimum für mehrere Datensätze zurück.\n * @param  {[Array]} data           Der Datensatz\n * @param  {[Array]} values         Der Config-Array für die zu untersuchenden\n *                          \t\t\t\tDatenreihen.\n * @param  {{Function}} v_accessor  Die Funktion, die für eine bestimmte value-\n *                                  Reihe den Accessor zurückgibt.\n * @return {[Object]}               Das Minimum\n */\nmodule.exports.minMultipleSets = function(data, values, v_accessor) {\n  var min;\n  for(var i = 0; i<values.length; i++){\n    var lmin = d3.min(data, v_accessor(values[i]));\n    if(i == 0 || lmin<min) {\n      min = lmin;\n    }\n  }\n  return min;\n}\n\n/**\n * Gibt das Maximum für mehrere Datensätze zurück.\n * @param  {[Array]} data           Der Datensatz\n * @param  {[Array]} values         Der Config-Array für die zu untersuchenden Datenrei-\n *                                  hen.\n * @param  {{Function}} v_accessor  Die Funktion, die für eine bestimmte value-\n *                                   Reihe den Accessor zurückgibt.\n * @return {[Object]}               Das Maximum\n */\nmodule.exports.maxMultipleSets = function(data, values, v_accessor) {\n  var max;\n  for(var i = 0; i<values.length; i++){\n    var lmax = d3.max(data, v_accessor(values[i]));\n    if(i == 0 || lmax>max) {\n      max = lmax;\n    }\n  }\n  return max;\n}\n\n/**\n * Gibt die Summe der Minimums und des mit dem Faktor factor multiplizierten\n * Unterschied von min und max zurück.\n * Wird verwendet, damit oben und rechts von Graphen Platz ausgelassen wird.\n * @param  {[Number]} min       Minimum ohne Overflow\n * @param  {[Number]} max       Maximum ohne Overflow\n * @param  {[Number]} factor    Overflow-Faktor\n * @param  {{String}} data_type Der Datentyp von min und max\n * @return {[Number]}           Das Maximum mit Overflow.\n */\nmodule.exports.applyOverflow = function(min, max, factor, data_type) {\n  if(data_type == \"Date\") {\n    return new Date(min.getTime() + (max.getTime()-min.getTime()) * factor);\n  } else if(data_type == \"Number\") {\n    return min + (max-min) * factor;\n  }\n}\n","/**\n * Array sortieren\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n * @return {[type]} [description]\n */\nmodule.exports = function(data, index) {\n  data.sort(function(a, b) {\n    if (index.accessor(a) < index.accessor(b)) {\n      return -1;\n    }\n    if (index.accessor(a) > index.accessor(b)) {\n      return 1;\n    }\n    return 0;\n  });\n\n  return data;\n}\n","/*******************************************************************************\n *\n *\n * Tooltip\n *\n *\n ******************************************************************************/\n\nconsole.log(\"Tooltip\");\n\n/**\n * Einstellungen für dieses Modul.\n * @type {Object}\n */\nmodule.exports.opt = {};\n\n/**\n * Findet den zu einem gegebenen Wert den nächsten in einem Array vorhandenem Wert.\n * @param  {[Array]} data         Datenset\n * @param  {[Function]} accessor  Funktion, das den zu vergleichenden Wert\n *                                zurückgibt, wenn das Objekt gegeben wird.\n * @param  {[type]} item          Der zu vergleichende Wert\n * @return {[Number]}             Der Index (0 < @return < data.length-1)\n */\nmodule.exports.nextIndex = function(data, accessor, item){\n  var index = -1;\n  for(var i = 0; i<data.length-1; i++){\n    // Liegt der Punkt zwischen zwei gegebenen Punkten?\n    var this_d = accessor(data[i]);\n    var next = accessor(data[i+1]);\n    var afterThis = item >=this_d;\n    var beforeNext = item <= next;\n\n    if(afterThis && beforeNext){\n      // Falls ja, setze 'index' auf den index des näheren Punktes.\n      Δ1 = Math.abs(accessor(data[i]) - item);\n      Δ2 = Math.abs(accessor(data[i+1]) - item);\n      index = Δ1 < Δ2 ? i : i + 1;\n    }\n  }\n  return index;\n}\n\n/**\n * Funktion für den Tooltip-Kreis und die Werteanzeige\n * @param  {[Array]} data           Datenarray\n * @param  {{String}} rowId       Name der Reihe\n * @param  {[Function]} accessor    Funktion, die das Koordinatenpaar den Punktes\n *                                \tzurückgibt.\n * @param  {[Number]} index         Index des Datenarray, die den zu \"tooltippenden\"\n *                                \tWert entspricht.\n * @param {{d3 View}} parent        d3-View, in das das Tooltip eingesetzt werden\n *                    \t\t\t\t\t\t\tsollte.\n * @param {{Function}} textAccessor Funktion, die den Text für das Tooltip zu-\n *                                  rückgibt.\n */\nmodule.exports.tooltip = function(data, rowId, accessor, index, parent, textAccessor, activated) {\n\n  // tooltip-Variablen\n  var tip = d3.select(\"#tooltip[data-row='\" + rowId + \"']\");\n  tip.classed(\"hidden\", !activated);\n\n  if(tip.empty()){\n    tip = parent.append(\"g\")\n      .attr(\"id\", \"tooltip\")\n      .attr(\"class\", \"tooltip\")\n      .attr(\"data-row\", rowId);\n\n    tip.append(\"circle\")\n      .attr(\"id\", \"tooltip-circle\");\n\n    var label = tip.append(\"g\")\n      .attr(\"id\", \"label\");\n\n    var text = label.append(\"text\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"id\", \"label-text\");\n  }\n\n  if(index==-1){\n    tip.attr(\"visibility\", \"hidden\");\n    return;\n  }\n  tip.attr(\"visibility\", \"visible\");\n\n\n  tip.select(\"#label-text\")\n    .text(textAccessor(data[index]))\n    .attr(\"x\", 0)\n    .attr(\"y\", -10);\n\n  var cord = accessor(data[index]);\n  tip.attr(\"transform\", \"translate(\"+cord[0]+\",\"+cord[1]+\")\");\n}\n\n/**\n * Funktion, um den Ort des Tooltips neu zu berechnen (zum Beispiel wenn sich\n * die Maus bewegt oder gezoomt wird).\n * @param  {{Array}}    data        Der Datensatz zu der Visualisation\n * @param  {[d3 Scale]} xScale      Die x-Skala\n * @param  {[d3 Scale]} yScale      Die y-Skala\n * @param  {{Function}} index       Die Config für den Index\n * @param  {{Function}} values      Die Config für die Values\n */\nmodule.exports.updateTooltip = function(data, xScale, yScale, index, value, v_accessor, v_accessor_scaled, v_accessor_cord){\n  if(!module.exports.mouse){\n    return;\n  }\n  var x = module.exports.mouse[0]-module.exports.opt.graphTransform.xstart;\n\n  // Das interpolierte Datum berechnen\n  var x_date = xScale.invert(x);\n\n    // Den nächsten Index suchen.\n    var tooltipIndex = module.exports.nextIndex(data, index.accessor, x_date);\n\n    //tooltip\n    module.exports.tooltip(data, value.rowId, v_accessor_cord(index, value), tooltipIndex, d3.select(\"#graph\"), function(d) {\n      // Zahl runden\n      // http://stackoverflow.com/questions/11832914/round-to-at-most-2-decimal-places-in-javascript\n      return Math.round(v_accessor(value)(d) * 1000) / 1000;\n    }, value.activated);\n\n}\n","var tooltip = require('./modules/tooltip');\nvar line = require('./modules/line');\nvar sort = require('./modules/sort');\nvar range = require('./modules/range');\nvar points = require('./modules/points');\nvar id = require('./modules/id');\nvar format = require('./modules/format');\nvar filter = require('./modules/filter');\n\n/*******************************************************************************\n *\n *\n * Initialisierung Visualisation\n *\n *\n ******************************************************************************/\n\n// Für die Visualisation benötigte Variablen\n\nvar config, datasetsMeta, datasets, index, values, v_accessor, v_acessor_scaled,\n  accessor_data, v_accessor_cord, xScale, yScale, w, h, graphTransform, mouse,\n  xAxis, yAxis, showPoints;\n\nshowPoints = false;\n\n/**\n * Laden der Konfigurationsdatei\n * @param  {[String]} \"meta.json\"             Der Dateiname für die\n *                                            Konfigurationsdatei\n * @param  {[Function]} function(err, config) Das Callback\n */\nd3.json(\"meta.json\", function(err, res) {\n  if(err) {\n    console.log(err);\n    alert(err);\n    return;\n  }\n\n  config = [];\n  datasetsMeta = res.datasets;\n\n  index = {};\n  values = [];\n\n  var colors = d3.scale.category10();\n\n  for(var i = 0; i<datasetsMeta.length; i++) {\n    var dataset = datasetsMeta[i];\n    var url = dataset.url;\n\n    for(var j = 0; j<dataset.config.length; j++){\n      var c = dataset.config[j];\n      c.url = url;\n\n      // Generiere id\n      c.rowId = id.get(c);\n\n      config.push(c);\n\n      // Einfügen der Config in index oder values\n      if(c.type == \"index\"){\n        index = c;\n      } else if(c.type == \"value\") {\n        // Spaltenspezifische Farbe generieren\n        c.color = colors(values.length+1);\n\n        // Wenn das Attribut activated nicht gesetzt ist, setze es auch true.\n        if(typeof c.activated == 'undefined') {\n          c.activated = true;\n        }\n        values.push(c);\n      }\n    }\n    // Bei unbekannten Typen: nicht in values oder index einfügen.\n  }\n\n  // Datentyp der Skalen festlegen\n  if(index.data_type==\"Number\") {\n    xScale = d3.scale.linear();\n  } else if(index.data_type==\"Date\") {\n    xScale = d3.time.scale();\n  }\n\n  if(values[0].data_type==\"Number\"){\n    yScale = d3.scale.linear();\n  } else if(values[0].data_type==\"Date\") {\n    yScale = d3.time.scale();\n  }\n\n\n\n  // Höhe und Breite des gesamten SVG-Elements definieren; Verschiebung des\n  // Graphs\n  w = 950;\n  h = 400;\n\n  graphTransform = {xstart: 70, ytop: 0, xend:0, ybottom:50};\n\n  // Das Tooltip über die Transformation benachrichtigen\n  tooltip.opt.graphTransform = graphTransform;\n\n  // Globale Maus-Variable initalisieren\n  mouse = [];\n\n  // Wertebereich der Achsenskalierungen definieren. Hier ist die Anzahl der Pixel\n  // gemeint, über die sich die Achsen erstrecken. Die x-Achse und die y-Achse\n  // verschieben wir um 50 nach rechts, damit man die y-Achse beschriften kann.\n  xScale.range([0,w - graphTransform.xstart - graphTransform.xend]);\n  yScale.range([h - graphTransform.ytop - graphTransform.ybottom, 0]);\n\n  // Die Achsen werden von d3 generiert.\n  xAxis = d3.svg.axis().scale(xScale).orient(\"bottom\").ticks(5);\n  yAxis = d3.svg.axis().scale(yScale).orient(\"left\").ticks(5);\n\n  /*******************************************************************************\n   *\n   *\n   * Accessors für die Daten\n   *\n   *\n   ******************************************************************************/\n\n   index.accessor = function(d) {\n     return d[index.row];\n   };\n\n   index.accessor_scaled = function(d) {\n     return xScale(d[index.row]);\n   };\n\n   v_accessor = function(entry) {\n     return function(d) {\n       return d[entry.rowId];\n     };\n   };\n\n   v_accessor_scaled = function(entry) {\n     return function(d) {\n       return yScale(d[entry.rowId]);\n     }\n   };\n\n   v_accessor_cord = function(index, entry) {\n     return function(d) {\n       return [index.accessor_scaled(d), v_accessor_scaled(entry)(d)];\n     };\n   };\n\n   // Die Daten laden\n   loadFiles();\n});\n\n\n/*******************************************************************************\n *\n *\n * Laden der Daten\n *\n *\n ******************************************************************************/\n\n\n/**\n * Die Funktion, die den Datensatz lädt und vorbereitet.\n *\n * Vorgehen:  1. Laden der Daten\n * \t\t\t\t\t\t2. Formatieren des Datensatzes (data_types und id)\n * \t\t\t\t\t\t3. 'Mergen' mit den anderen Datensätzen, d. h. zusammenfügen\n * \t\t\t\t\t\t4. Sortieren\n * \t\t\t\t\t\t5. Die gemergten Datensätze weitergeben\n */\nfunction loadFiles() {\n\n  // Anzahl von Dateien, die schon heruntergeladen wurden\n  var loaded = 0;\n\n  // Die Variable für die gemergten Datensätze\n  var data = [];\n\n  // Jedes einzelne File herunterladen (1)\n  for(var i = 0; i<datasetsMeta.length; i++){\n    d3.csv(datasetsMeta[i].url, mkcb(i));\n  }\n\n  /**\n   * Funktion, die die Callback-Funktion für einen bestimmten Datensatz-Meta-\n   * daten-Objekt mit Index i zurückgibt. Siehe auch: MKCB-Problem.\n   * @param  {[Number]} i   Index des Datensatz-Metadaten-Objekts aus\n   *                        datasetsMeta.\n   * @return {[Function]}   Das generierte Callback, das nach dem Laden der\n   *                        Datei ausgeführt wird.\n   */\n  function mkcb(i) {return function(err, resp) {\n    if(err){\n      alert(err);\n      console.log(err);\n      return;\n    }\n\n    // Formatieren (2)\n    resp = format.data_types(resp, datasetsMeta[i].config);\n    resp = format.ids(resp, datasetsMeta[i].config);\n\n    // Merge (3)\n    for(var j = 0; j<resp.length; j++){\n      data.push(resp[j]);\n    }\n\n\n    if(++loaded == datasetsMeta.length){\n      // Alle Datein sind heruntergeladen worden und gemergt.\n\n      // Sortieren (4)\n      data = sort(data, index);\n\n      console.log(\"loaded\");\n\n      // Weitergeben (5)\n      loadVisualization(data);\n    }\n  };}\n}\n\n/*******************************************************************************\n *\n *\n * Laden der Visualisation\n *\n *\n ******************************************************************************/\n\n/**\n * Lädt die Visualisation\n * @param  {[type]} data  Die gemergten Datensätze\n */\nfunction loadVisualization(data) {\n\n  /**\n   *\n   *  Achsen initalisieren (d3)\n   *\n   */\n\n   //  Wertebereich der Daten bestimmen mit d3: Um einen kleinen Abstand zwischen\n   //  den maximalen Punkten und dem Ende des Rändern des Diagrammes zu bewahren,\n   //  wird der Unterschied (Δ) des Minimums und dem untersuchten Wert mit 1.1\n   //  mulitpliziert. Anschliessend wird die Summe des Minimums und des\n   //  multiplizierten Wertes an d3 zurückgegeben.\n\n  var xWertebereich = [];\n  var yWertebereich = [];\n  \n  xWertebereich[0] = range.min(data, index.accessor);\n  xWertebereich[1] = range.max(data, index.accessor);\n\n  yWertebereich[0] = range.minMultipleSets(data, values, v_accessor);\n  yWertebereich[1] = range.maxMultipleSets(data, values, v_accessor);\n\n  xWertebereich[1] = range.applyOverflow(xWertebereich[0], xWertebereich[1],\n    1.1, index.data_type);\n  yWertebereich[1] = range.applyOverflow(yWertebereich[0], yWertebereich[1],\n    1.1, values[0].data_type);\n\n  xScale.domain(xWertebereich);\n  yScale.domain(yWertebereich);\n\n  /**\n   *\n   * Zoom (d3)\n   *\n   */\n\n  // Zoom hinzufügen\n  var zoom = d3.behavior.zoom()\n    .x(xScale)\n    .y(yScale)\n    .scaleExtent([0.9, 50])\n    .on(\"zoom\", draw);\n\n  // die variable graph initialiseren, damit sie in der Funktion zoomed() ver-\n  // wendet werden kann, obwohl sie erst später definiert wird.\n  var graph;\n\n  /**\n   * Wird aufgerufen, sobald gezoomt wurde.\n   */\n  function draw() {\n    // Achsen neu zeichnen\n    xAxisContainer.call(xAxis);\n    yAxisContainer.call(yAxis);\n\n    // Punkte neu berechnen.\n    for(var i = 0; i<values.length; i++) {\n      var p = v.selectAll(\"circle.data-point[data-row='\" + values[i].rowId + \"']\")\n        .attr(\"cx\", index.accessor_scaled)\n        .attr(\"cy\", v_accessor_scaled(values[i]));\n    }\n\n    // Tooltip, Linie bei Zoom aktualisieren\n    for(var i = 0; i<values.length; i++) {\n      tooltip.updateTooltip(filter.row(data, values[i].rowId), xScale, yScale, index, values[i], v_accessor, v_accessor_scaled, v_accessor_cord);\n      line.update(filter.row(data, values[i].rowId), index, values[i], v_accessor_scaled, v_accessor_cord);\n    }\n  }\n\n  /**\n   *\n   * Elemente einfügen\n   *\n   */\n\n  // SVG-Element mit id 'visualization' extrahieren aus html\n  var v = d3.select(\"#visualization\")\n    .attr(\"width\", w)\n    .attr(\"height\", h)\n\n  // Unterstützung für Zoom hinzufügen\n    .call(zoom);\n\n  // SVG-Maske für den Graph: Wir wollen nicht, dass Punkte aus unserem\n  // definierten Feld auftauchen. Siehe Masken-Problem.\n  v.append(\"mask\")\n    .attr(\"id\", \"mask\")\n    .append(\"rect\")\n      .attr(\"x\", 0)\n      .attr(\"y\", 0)\n      .attr(\"width\", w - graphTransform.xstart - graphTransform.xend)\n      .attr(\"height\", h - graphTransform.ytop - graphTransform.ybottom)\n      .attr(\"fill\", \"white\");\n\n  // Container für die Visualisation hinzufügen und zu der Maske linken\n  graph = v.append(\"g\")\n    .attr(\"id\", \"graph\")\n    .attr(\"transform\", \"translate(\" + graphTransform.xstart +\n      \",\" + graphTransform.ytop + \")\")\n    .attr(\"mask\", \"url(#mask)\");\n\n  // Die Punkte zeichnen für jede Datenspalte (in values).\n  for(var i = 0; i<values.length; i++) {\n\n    // Die Punkte einer Spalte haben für das Attribut data-row die generierte id\n    // (siehe Identifikations-Problem)\n    var circles = graph.selectAll(\"circle[data-row='\"+values[i].rowId+\"']\")\n\n      // Aus dem gesamten gemergten Datensatz die Elemente extrahieren, die die\n      // entsprechende Reihe besitzen. Siehe Merge-Problem.\n      // Daten an Selektion binden, damit alle Aktionen an diesem Element für\n      // alle gebundenen Datenelemente ausgeführt werden.\n      .data(filter.row(data, values[i].rowId)).enter();\n\n    // Aktionen an Datengebundener Selektion ausführen\n    circles.append(\"circle\")\n        .attr(\"class\", \"data-point\")\n        .attr(\"data-row\", values[i].rowId)\n        .attr(\"cx\", index.accessor_scaled)\n        .attr(\"cy\", v_accessor_scaled(values[i]));\n  }\n\n  // Sichtbarkeit der Punkte prüfen\n  points.updateVisibility(values);\n\n  /**\n   *\n   * d3-Achsen einfügen\n   *\n   */\n\n  var xAxisContainer = v.append(\"g\")\n    .attr(\"class\", \"axis axis-x\")\n    .attr(\"transform\", \"translate(\" +\n      graphTransform.xstart + \",\" +\n      (h - graphTransform.ybottom) + \")\")\n    .call(xAxis);\n\n  var yAxisContainer = v.append(\"g\")\n    .attr(\"class\", \"axis axis-y\")\n    .attr(\"transform\", \"translate(\"+graphTransform.xstart+\",0)\")\n    .call(yAxis);\n\n  /**\n   *\n   * Tooltip (nicht von d3, selber implementiert)\n   *\n   */\n\n  // Maus-Koordinaten: Um auf die Maus-Koordinaten zugreifen zu können, muss man\n  // ein unsichtbares Element über den gesamten Graph legen, der alle\n  // 'Maus-Events' \"aufnimmt\". Ein leerer g-SVG-Container (wie 'graph') ist\n  // nicht fähig, Maus-Events aufzunehmen. Siehe Event-Problem.\n  v.append(\"rect\")\n    .attr(\"id\", \"overlay\")\n    .attr(\"x\", graphTransform.xstart)\n    .attr(\"y\", graphTransform.ytop)\n    .attr(\"width\", w - graphTransform.xstart - graphTransform.xend)\n    .attr(\"height\", h - graphTransform.ytop - graphTransform.ybottom)\n    .on(\"mousemove\", function() {\n      tooltip.mouse = d3.mouse(this);\n      for(var i = 0; i<values.length; i++) {\n        tooltip.updateTooltip(filter.row(data, values[i].rowId), xScale, yScale,\n          index, values[i], v_accessor, v_accessor_scaled, v_accessor_cord);\n      }\n    });\n\n  /**\n   *\n   * Linien\n   *\n   */\n\n   for(var i = 0; i<values.length; i++) {\n      line.addLine(index, values[i], filter.row(data, values[i].rowId), v_accessor_cord(index, values[i]));\n   }\n\n   $('select').on('change', function() {\n     line.mode = this.value;\n     for(var i = 0; i<values.length; i++){\n       line.update(filter.row(data, values[i].rowId), index, values[i], v_accessor_scaled, v_accessor_cord);\n     }\n   });\n\n   $('#checkbox').on('change', function() {\n     if($(this).is(\":checked\")){\n       showPoints = true;\n     } else {\n       showPoints = false;\n      }\n      points.visible = showPoints;\n      points.updateVisibility(values);\n   });\n\n   /**\n    *\n    * Toggles\n    *\n    */\n\n    for(var i = 0; i<values.length; i++){\n      d3.select(\"#select-row\")\n        .append(\"p\")\n        .attr(\"class\", \"select-row-item\")\n        .classed(\"inactive\", !values[i].activated)\n        .attr(\"style\", \"border-color:\"+values[i].color)\n        .attr(\"data-row\", values[i].rowId)\n        .text(values[i].name ? values[i].name : values[i].row);\n\n      line.setActivated(values[i].activated, values[i].rowId, values);\n\n      $(\".select-row-item[data-row='\" + values[i].rowId + \"']\").on('click', function() {\n        var row = $(this).attr(\"data-row\");\n\n        if($(this).hasClass(\"inactive\")){\n          // activate this\n          $(this).toggleClass(\"inactive\", false);\n          line.setActivated(true, row, values);\n        } else {\n          // deactivate this\n          $(this).toggleClass(\"inactive\", true);\n          line.setActivated(false, row, values);\n        }\n      });\n    }\n}\n"],"sourceRoot":"/source/"}